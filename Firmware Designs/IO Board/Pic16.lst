;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/2/2017 12:05:45 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x295E      	GOTO       350
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00BD      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00BA      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;Pic16.c,23 :: 		void interrupt(){
;Pic16.c,24 :: 		if(pir1.rcif){ //Uart receive interrupt
0x000D	0x1E8C      	BTFSS      PIR1, 5
0x000E	0x28D3      	GOTO       L_interrupt0
;Pic16.c,25 :: 		rxByte = rcreg;   //Clear interrupt by reading receive register
0x000F	0x081A      	MOVF       RCREG, 0
0x0010	0x00A2      	MOVWF      _rxByte
;Pic16.c,26 :: 		++session;
0x0011	0x0AA7      	INCF       _session, 1
;Pic16.c,29 :: 		if(session==1){//next session if reading of analog inputs
0x0012	0x0827      	MOVF       _session, 0
0x0013	0x3A01      	XORLW      1
0x0014	0x1D03      	BTFSS      STATUS, 2
0x0015	0x281C      	GOTO       L_interrupt1
;Pic16.c,30 :: 		txByte= Lo(anIn0);
0x0016	0x0834      	MOVF       _anIn0, 0
0x0017	0x00A3      	MOVWF      _txByte
;Pic16.c,31 :: 		uart1_write(txByte);
0x0018	0x0834      	MOVF       _anIn0, 0
0x0019	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x001A	0x2154      	CALL       _UART1_Write
;Pic16.c,32 :: 		return;
0x001B	0x28D3      	GOTO       L__interrupt49
;Pic16.c,33 :: 		}
L_interrupt1:
;Pic16.c,34 :: 		else if(session==2){
0x001C	0x0827      	MOVF       _session, 0
0x001D	0x3A02      	XORLW      2
0x001E	0x1D03      	BTFSS      STATUS, 2
0x001F	0x2826      	GOTO       L_interrupt3
;Pic16.c,35 :: 		txByte=Hi(anIn0);
0x0020	0x0835      	MOVF       _anIn0+1, 0
0x0021	0x00A3      	MOVWF      _txByte
;Pic16.c,36 :: 		uart1_write(txByte);
0x0022	0x0835      	MOVF       _anIn0+1, 0
0x0023	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0024	0x2154      	CALL       _UART1_Write
;Pic16.c,37 :: 		return;
0x0025	0x28D3      	GOTO       L__interrupt49
;Pic16.c,38 :: 		}
L_interrupt3:
;Pic16.c,39 :: 		else if(session==3){//next session if reading of analog inputs
0x0026	0x0827      	MOVF       _session, 0
0x0027	0x3A03      	XORLW      3
0x0028	0x1D03      	BTFSS      STATUS, 2
0x0029	0x2830      	GOTO       L_interrupt5
;Pic16.c,40 :: 		txByte= Lo(anIn1);
0x002A	0x0838      	MOVF       _anIn1, 0
0x002B	0x00A3      	MOVWF      _txByte
;Pic16.c,41 :: 		uart1_write(txByte);
0x002C	0x0838      	MOVF       _anIn1, 0
0x002D	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x002E	0x2154      	CALL       _UART1_Write
;Pic16.c,42 :: 		return;
0x002F	0x28D3      	GOTO       L__interrupt49
;Pic16.c,43 :: 		}
L_interrupt5:
;Pic16.c,44 :: 		else if(session==4){
0x0030	0x0827      	MOVF       _session, 0
0x0031	0x3A04      	XORLW      4
0x0032	0x1D03      	BTFSS      STATUS, 2
0x0033	0x283A      	GOTO       L_interrupt7
;Pic16.c,45 :: 		txByte=Hi(anIn1);
0x0034	0x0839      	MOVF       _anIn1+1, 0
0x0035	0x00A3      	MOVWF      _txByte
;Pic16.c,46 :: 		uart1_write(txByte);
0x0036	0x0839      	MOVF       _anIn1+1, 0
0x0037	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0038	0x2154      	CALL       _UART1_Write
;Pic16.c,47 :: 		return;
0x0039	0x28D3      	GOTO       L__interrupt49
;Pic16.c,48 :: 		}
L_interrupt7:
;Pic16.c,49 :: 		else if(session==5){//next session if reading of analog inputs
0x003A	0x0827      	MOVF       _session, 0
0x003B	0x3A05      	XORLW      5
0x003C	0x1D03      	BTFSS      STATUS, 2
0x003D	0x2844      	GOTO       L_interrupt9
;Pic16.c,50 :: 		txByte= Lo(anIn2);
0x003E	0x0836      	MOVF       _anIn2, 0
0x003F	0x00A3      	MOVWF      _txByte
;Pic16.c,51 :: 		uart1_write(txByte);
0x0040	0x0836      	MOVF       _anIn2, 0
0x0041	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0042	0x2154      	CALL       _UART1_Write
;Pic16.c,52 :: 		return;
0x0043	0x28D3      	GOTO       L__interrupt49
;Pic16.c,53 :: 		}
L_interrupt9:
;Pic16.c,54 :: 		else if(session==6){
0x0044	0x0827      	MOVF       _session, 0
0x0045	0x3A06      	XORLW      6
0x0046	0x1D03      	BTFSS      STATUS, 2
0x0047	0x284E      	GOTO       L_interrupt11
;Pic16.c,55 :: 		txByte=Hi(anIn2);
0x0048	0x0837      	MOVF       _anIn2+1, 0
0x0049	0x00A3      	MOVWF      _txByte
;Pic16.c,56 :: 		uart1_write(txByte);
0x004A	0x0837      	MOVF       _anIn2+1, 0
0x004B	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x004C	0x2154      	CALL       _UART1_Write
;Pic16.c,57 :: 		return;
0x004D	0x28D3      	GOTO       L__interrupt49
;Pic16.c,58 :: 		}
L_interrupt11:
;Pic16.c,59 :: 		else if(session==7){//next session if reading of analog inputs
0x004E	0x0827      	MOVF       _session, 0
0x004F	0x3A07      	XORLW      7
0x0050	0x1D03      	BTFSS      STATUS, 2
0x0051	0x2858      	GOTO       L_interrupt13
;Pic16.c,60 :: 		txByte= Lo(anIn3);
0x0052	0x082A      	MOVF       _anIn3, 0
0x0053	0x00A3      	MOVWF      _txByte
;Pic16.c,61 :: 		uart1_write(txByte);
0x0054	0x082A      	MOVF       _anIn3, 0
0x0055	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0056	0x2154      	CALL       _UART1_Write
;Pic16.c,62 :: 		return;
0x0057	0x28D3      	GOTO       L__interrupt49
;Pic16.c,63 :: 		}
L_interrupt13:
;Pic16.c,64 :: 		else if(session==8){
0x0058	0x0827      	MOVF       _session, 0
0x0059	0x3A08      	XORLW      8
0x005A	0x1D03      	BTFSS      STATUS, 2
0x005B	0x2862      	GOTO       L_interrupt15
;Pic16.c,65 :: 		txByte=Hi(anIn3);
0x005C	0x082B      	MOVF       _anIn3+1, 0
0x005D	0x00A3      	MOVWF      _txByte
;Pic16.c,66 :: 		uart1_write(txByte);
0x005E	0x082B      	MOVF       _anIn3+1, 0
0x005F	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0060	0x2154      	CALL       _UART1_Write
;Pic16.c,67 :: 		return;
0x0061	0x28D3      	GOTO       L__interrupt49
;Pic16.c,68 :: 		}
L_interrupt15:
;Pic16.c,69 :: 		else if(session==9){//next session if reading of analog inputs
0x0062	0x0827      	MOVF       _session, 0
0x0063	0x3A09      	XORLW      9
0x0064	0x1D03      	BTFSS      STATUS, 2
0x0065	0x286C      	GOTO       L_interrupt17
;Pic16.c,70 :: 		txByte= Lo(anIn4);
0x0066	0x0828      	MOVF       _anIn4, 0
0x0067	0x00A3      	MOVWF      _txByte
;Pic16.c,71 :: 		uart1_write(txByte);
0x0068	0x0828      	MOVF       _anIn4, 0
0x0069	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x006A	0x2154      	CALL       _UART1_Write
;Pic16.c,72 :: 		return;
0x006B	0x28D3      	GOTO       L__interrupt49
;Pic16.c,73 :: 		}
L_interrupt17:
;Pic16.c,74 :: 		else if(session==10){
0x006C	0x0827      	MOVF       _session, 0
0x006D	0x3A0A      	XORLW      10
0x006E	0x1D03      	BTFSS      STATUS, 2
0x006F	0x2876      	GOTO       L_interrupt19
;Pic16.c,75 :: 		txByte=Hi(anIn4);
0x0070	0x0829      	MOVF       _anIn4+1, 0
0x0071	0x00A3      	MOVWF      _txByte
;Pic16.c,76 :: 		uart1_write(txByte);
0x0072	0x0829      	MOVF       _anIn4+1, 0
0x0073	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0074	0x2154      	CALL       _UART1_Write
;Pic16.c,77 :: 		return;
0x0075	0x28D3      	GOTO       L__interrupt49
;Pic16.c,78 :: 		}
L_interrupt19:
;Pic16.c,79 :: 		else if(session==11){//next session if reading of analog inputs
0x0076	0x0827      	MOVF       _session, 0
0x0077	0x3A0B      	XORLW      11
0x0078	0x1D03      	BTFSS      STATUS, 2
0x0079	0x2880      	GOTO       L_interrupt21
;Pic16.c,80 :: 		txByte= Lo(anIn5);
0x007A	0x082C      	MOVF       _anIn5, 0
0x007B	0x00A3      	MOVWF      _txByte
;Pic16.c,81 :: 		uart1_write(txByte);
0x007C	0x082C      	MOVF       _anIn5, 0
0x007D	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x007E	0x2154      	CALL       _UART1_Write
;Pic16.c,82 :: 		return;
0x007F	0x28D3      	GOTO       L__interrupt49
;Pic16.c,83 :: 		}
L_interrupt21:
;Pic16.c,84 :: 		else if(session==12){
0x0080	0x0827      	MOVF       _session, 0
0x0081	0x3A0C      	XORLW      12
0x0082	0x1D03      	BTFSS      STATUS, 2
0x0083	0x288A      	GOTO       L_interrupt23
;Pic16.c,85 :: 		txByte=Hi(anIn5);
0x0084	0x082D      	MOVF       _anIn5+1, 0
0x0085	0x00A3      	MOVWF      _txByte
;Pic16.c,86 :: 		uart1_write(txByte);
0x0086	0x082D      	MOVF       _anIn5+1, 0
0x0087	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0088	0x2154      	CALL       _UART1_Write
;Pic16.c,87 :: 		return;
0x0089	0x28D3      	GOTO       L__interrupt49
;Pic16.c,88 :: 		}
L_interrupt23:
;Pic16.c,89 :: 		else if(session==13){//next session if reading of analog inputs
0x008A	0x0827      	MOVF       _session, 0
0x008B	0x3A0D      	XORLW      13
0x008C	0x1D03      	BTFSS      STATUS, 2
0x008D	0x2894      	GOTO       L_interrupt25
;Pic16.c,90 :: 		txByte= Lo(anIn6);
0x008E	0x0830      	MOVF       _anIn6, 0
0x008F	0x00A3      	MOVWF      _txByte
;Pic16.c,91 :: 		uart1_write(txByte);
0x0090	0x0830      	MOVF       _anIn6, 0
0x0091	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x0092	0x2154      	CALL       _UART1_Write
;Pic16.c,92 :: 		return;
0x0093	0x28D3      	GOTO       L__interrupt49
;Pic16.c,93 :: 		}
L_interrupt25:
;Pic16.c,94 :: 		else if(session==14){
0x0094	0x0827      	MOVF       _session, 0
0x0095	0x3A0E      	XORLW      14
0x0096	0x1D03      	BTFSS      STATUS, 2
0x0097	0x289E      	GOTO       L_interrupt27
;Pic16.c,95 :: 		txByte=Hi(anIn6);
0x0098	0x0831      	MOVF       _anIn6+1, 0
0x0099	0x00A3      	MOVWF      _txByte
;Pic16.c,96 :: 		uart1_write(txByte);
0x009A	0x0831      	MOVF       _anIn6+1, 0
0x009B	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x009C	0x2154      	CALL       _UART1_Write
;Pic16.c,97 :: 		return;
0x009D	0x28D3      	GOTO       L__interrupt49
;Pic16.c,98 :: 		}
L_interrupt27:
;Pic16.c,99 :: 		else if(session==15){//next session if reading of analog inputs
0x009E	0x0827      	MOVF       _session, 0
0x009F	0x3A0F      	XORLW      15
0x00A0	0x1D03      	BTFSS      STATUS, 2
0x00A1	0x28A8      	GOTO       L_interrupt29
;Pic16.c,100 :: 		txByte= Lo(anIn7);
0x00A2	0x082E      	MOVF       _anIn7, 0
0x00A3	0x00A3      	MOVWF      _txByte
;Pic16.c,101 :: 		uart1_write(txByte);
0x00A4	0x082E      	MOVF       _anIn7, 0
0x00A5	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x00A6	0x2154      	CALL       _UART1_Write
;Pic16.c,102 :: 		return;
0x00A7	0x28D3      	GOTO       L__interrupt49
;Pic16.c,103 :: 		}
L_interrupt29:
;Pic16.c,104 :: 		else if(session==16){
0x00A8	0x0827      	MOVF       _session, 0
0x00A9	0x3A10      	XORLW      16
0x00AA	0x1D03      	BTFSS      STATUS, 2
0x00AB	0x28B2      	GOTO       L_interrupt31
;Pic16.c,105 :: 		txByte=Hi(anIn7);
0x00AC	0x082F      	MOVF       _anIn7+1, 0
0x00AD	0x00A3      	MOVWF      _txByte
;Pic16.c,106 :: 		uart1_write(txByte);
0x00AE	0x082F      	MOVF       _anIn7+1, 0
0x00AF	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x00B0	0x2154      	CALL       _UART1_Write
;Pic16.c,107 :: 		return;
0x00B1	0x28D3      	GOTO       L__interrupt49
;Pic16.c,108 :: 		}
L_interrupt31:
;Pic16.c,109 :: 		else if(session==17){  //Digital inputs are read first
0x00B2	0x0827      	MOVF       _session, 0
0x00B3	0x3A11      	XORLW      17
0x00B4	0x1D03      	BTFSS      STATUS, 2
0x00B5	0x28BC      	GOTO       L_interrupt33
;Pic16.c,110 :: 		txByte= portd;
0x00B6	0x0808      	MOVF       PORTD, 0
0x00B7	0x00A3      	MOVWF      _txByte
;Pic16.c,111 :: 		uart1_write(txByte);
0x00B8	0x0823      	MOVF       _txByte, 0
0x00B9	0x00BF      	MOVWF      FARG_UART1_Write_data_
0x00BA	0x2154      	CALL       _UART1_Write
;Pic16.c,112 :: 		return;
0x00BB	0x28D3      	GOTO       L__interrupt49
;Pic16.c,113 :: 		}
L_interrupt33:
;Pic16.c,116 :: 		else if(session==18){
0x00BC	0x0827      	MOVF       _session, 0
0x00BD	0x3A12      	XORLW      18
0x00BE	0x1D03      	BTFSS      STATUS, 2
0x00BF	0x28C3      	GOTO       L_interrupt35
;Pic16.c,117 :: 		Lo(anOut)=rxByte;
0x00C0	0x0822      	MOVF       _rxByte, 0
0x00C1	0x00B2      	MOVWF      _anOut
;Pic16.c,118 :: 		return;
0x00C2	0x28D3      	GOTO       L__interrupt49
;Pic16.c,119 :: 		}
L_interrupt35:
;Pic16.c,120 :: 		else if(session==19){
0x00C3	0x0827      	MOVF       _session, 0
0x00C4	0x3A13      	XORLW      19
0x00C5	0x1D03      	BTFSS      STATUS, 2
0x00C6	0x28CA      	GOTO       L_interrupt37
;Pic16.c,121 :: 		Hi(anOut)=rxByte;
0x00C7	0x0822      	MOVF       _rxByte, 0
0x00C8	0x00B3      	MOVWF      _anOut+1
;Pic16.c,123 :: 		return;
0x00C9	0x28D3      	GOTO       L__interrupt49
;Pic16.c,124 :: 		}
L_interrupt37:
;Pic16.c,125 :: 		else if(session==20){ //first data to be written is digital output
0x00CA	0x0827      	MOVF       _session, 0
0x00CB	0x3A14      	XORLW      20
0x00CC	0x1D03      	BTFSS      STATUS, 2
0x00CD	0x28D2      	GOTO       L_interrupt39
;Pic16.c,126 :: 		portb=rxByte;
0x00CE	0x0822      	MOVF       _rxByte, 0
0x00CF	0x0086      	MOVWF      PORTB
;Pic16.c,127 :: 		session=0;
0x00D0	0x01A7      	CLRF       _session
;Pic16.c,128 :: 		return;
0x00D1	0x28D3      	GOTO       L__interrupt49
;Pic16.c,129 :: 		}
L_interrupt39:
;Pic16.c,130 :: 		return;
0x00D2	0x28D3      	GOTO       L__interrupt49
;Pic16.c,131 :: 		}
L_interrupt0:
;Pic16.c,132 :: 		}
L_end_interrupt:
L__interrupt49:
0x00D3	0x0820      	MOVF       32, 0
0x00D4	0x00F0      	MOVWF      R0
0x00D5	0x083A      	MOVF       ___savePCLATH, 0
0x00D6	0x008A      	MOVWF      PCLATH
0x00D7	0x0E3D      	SWAPF      ___saveSTATUS, 0
0x00D8	0x0083      	MOVWF      STATUS
0x00D9	0x0EFF      	SWAPF      R15, 1
0x00DA	0x0E7F      	SWAPF      R15, 0
0x00DB	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x00DC	0x1283      	BCF        STATUS, 5
0x00DD	0x1303      	BCF        STATUS, 6
0x00DE	0x083C      	MOVF       ___DoICPAddr+1, 0
0x00DF	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x00E0	0x083B      	MOVF       ___DoICPAddr, 0
0x00E1	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x00E2	0x0008      	RETURN
; end of _____DoICP
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x00E3	0x301D      	MOVLW      29
0x00E4	0x1283      	BCF        STATUS, 5
0x00E5	0x1303      	BCF        STATUS, 6
0x00E6	0x00FD      	MOVWF      R13
L_Delay_22us1:
0x00E7	0x0BFD      	DECFSZ     R13, 1
0x00E8	0x28E7      	GOTO       L_Delay_22us1
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x00E9	0x0008      	RETURN
; end of _Delay_22us
_ADC_Init:
;__Lib_ADC_88X.c,11 :: 		
;__Lib_ADC_88X.c,12 :: 		
0x00EA	0x30FF      	MOVLW      _ADC_Get_Sample
0x00EB	0x1283      	BCF        STATUS, 5
0x00EC	0x1303      	BCF        STATUS, 6
0x00ED	0x00A4      	MOVWF      _ADC_Get_Sample_Ptr
0x00EE	0x30FF      	MOVLW      hi_addr(_ADC_Get_Sample)
0x00EF	0x00A5      	MOVWF      _ADC_Get_Sample_Ptr+1
0x00F0	0x30FF      	MOVLW      FARG_ADC_Get_Sample_channel
0x00F1	0x00A6      	MOVWF      _ADC_Get_Sample_Ptr+2
0x00F2	0x30FF      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
;__Lib_ADC_88X.c,14 :: 		
0x00F3	0x30C3      	MOVLW      195
0x00F4	0x059F      	ANDWF      ADCON0, 1
;__Lib_ADC_88X.c,18 :: 		
0x00F5	0x30C0      	MOVLW      192
0x00F6	0x009F      	MOVWF      ADCON0
;__Lib_ADC_88X.c,19 :: 		
0x00F7	0x1683      	BSF        STATUS, 5
0x00F8	0x179F      	BSF        ADCON1, 7
;__Lib_ADC_88X.c,22 :: 		
0x00F9	0x1283      	BCF        STATUS, 5
0x00FA	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_88X.c,23 :: 		
L_end_ADC_Init:
0x00FB	0x0008      	RETURN
; end of _ADC_Init
_ADC_Read:
;__Lib_ADC_88X.c,55 :: 		
;__Lib_ADC_88X.c,57 :: 		
0x00FC	0x30C3      	MOVLW      195
0x00FD	0x1283      	BCF        STATUS, 5
0x00FE	0x1303      	BCF        STATUS, 6
0x00FF	0x059F      	ANDWF      ADCON0, 1
;__Lib_ADC_88X.c,61 :: 		
0x0100	0x30C0      	MOVLW      192
0x0101	0x009F      	MOVWF      ADCON0
;__Lib_ADC_88X.c,62 :: 		
0x0102	0x083E      	MOVF       FARG_ADC_Read_channel, 0
0x0103	0x00F0      	MOVWF      R0
0x0104	0x0DF0      	RLF        R0, 1
0x0105	0x1070      	BCF        R0, 0
0x0106	0x0DF0      	RLF        R0, 1
0x0107	0x1070      	BCF        R0, 0
0x0108	0x0870      	MOVF       R0, 0
0x0109	0x049F      	IORWF      ADCON0, 1
;__Lib_ADC_88X.c,63 :: 		
0x010A	0x1683      	BSF        STATUS, 5
0x010B	0x179F      	BSF        ADCON1, 7
;__Lib_ADC_88X.c,66 :: 		
0x010C	0x1283      	BCF        STATUS, 5
0x010D	0x141F      	BSF        ADCON0, 0
;__Lib_ADC_88X.c,69 :: 		
0x010E	0x20E3      	CALL       _Delay_22us
;__Lib_ADC_88X.c,72 :: 		
0x010F	0x149F      	BSF        ADCON0, 1
;__Lib_ADC_88X.c,75 :: 		
L_ADC_Read2:
0x0110	0x1C9F      	BTFSS      ADCON0, 1
0x0111	0x2914      	GOTO       L_ADC_Read3
;__Lib_ADC_88X.c,76 :: 		
0x0112	0x0000      	NOP
0x0113	0x2910      	GOTO       L_ADC_Read2
L_ADC_Read3:
;__Lib_ADC_88X.c,79 :: 		
0x0114	0x101F      	BCF        ADCON0, 0
;__Lib_ADC_88X.c,82 :: 		
0x0115	0x081E      	MOVF       ADRESH, 0
0x0116	0x00F1      	MOVWF      R0+1
0x0117	0x01F0      	CLRF       R0
0x0118	0x1683      	BSF        STATUS, 5
0x0119	0x081E      	MOVF       ADRESL, 0
0x011A	0x04F0      	IORWF      R0, 1
0x011B	0x3000      	MOVLW      0
0x011C	0x04F1      	IORWF      R0+1, 1
;__Lib_ADC_88X.c,83 :: 		
L_end_ADC_Read:
0x011D	0x0008      	RETURN
; end of _ADC_Read
_SPI1_Init:
;__Lib_SPI_c345.c,16 :: 		
;__Lib_SPI_c345.c,19 :: 		
0x011E	0x1683      	BSF        STATUS, 5
0x011F	0x1303      	BCF        STATUS, 6
0x0120	0x1287      	BCF        TRISC5_bit, BitPos(TRISC5_bit+0)
;__Lib_SPI_c345.c,20 :: 		
0x0121	0x1187      	BCF        TRISC3_bit, BitPos(TRISC3_bit+0)
;__Lib_SPI_c345.c,21 :: 		
0x0122	0x1607      	BSF        TRISC4_bit, BitPos(TRISC4_bit+0)
;__Lib_SPI_c345.c,23 :: 		
0x0123	0x1283      	BCF        STATUS, 5
0x0124	0x0194      	CLRF       SSPCON
;__Lib_SPI_c345.c,24 :: 		
0x0125	0x3040      	MOVLW      64
0x0126	0x1683      	BSF        STATUS, 5
0x0127	0x0094      	MOVWF      SSPSTAT
;__Lib_SPI_c345.c,25 :: 		
0x0128	0x1283      	BCF        STATUS, 5
0x0129	0x1694      	BSF        SSPCON, 5
;__Lib_SPI_c345.c,27 :: 		
L_end_SPI1_Init:
0x012A	0x0008      	RETURN
; end of _SPI1_Init
_UART1_Init:
;__Lib_UART_c67.c,2 :: 		
;__Lib_UART_c67.c,5 :: 		
0x012B	0x1683      	BSF        STATUS, 5
0x012C	0x1303      	BCF        STATUS, 6
0x012D	0x1698      	BSF        TXSTA, 5
;__Lib_UART_c67.c,6 :: 		
0x012E	0x3090      	MOVLW      144
0x012F	0x1283      	BCF        STATUS, 5
0x0130	0x0098      	MOVWF      RCSTA
;__Lib_UART_c67.c,7 :: 		
0x0131	0x1683      	BSF        STATUS, 5
0x0132	0x1787      	BSF        TRISC7_bit, BitPos(TRISC7_bit+0)
;__Lib_UART_c67.c,8 :: 		
0x0133	0x1307      	BCF        TRISC6_bit, BitPos(TRISC6_bit+0)
;__Lib_UART_c67.c,10 :: 		
L_UART1_Init0:
0x0134	0x1283      	BCF        STATUS, 5
0x0135	0x1E8C      	BTFSS      PIR1, 5
0x0136	0x293A      	GOTO       L_UART1_Init1
;__Lib_UART_c67.c,11 :: 		
0x0137	0x081A      	MOVF       RCREG, 0
0x0138	0x00F0      	MOVWF      R0
0x0139	0x2934      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,12 :: 		
L_end_UART1_Init:
0x013A	0x0008      	RETURN
; end of _UART1_Init
_SPI1_Write:
;__Lib_SPI_c345.c,67 :: 		
;__Lib_SPI_c345.c,70 :: 		
0x013B	0x1283      	BCF        STATUS, 5
0x013C	0x1303      	BCF        STATUS, 6
0x013D	0x083E      	MOVF       FARG_SPI1_Write_data_, 0
0x013E	0x0093      	MOVWF      SSPBUF
;__Lib_SPI_c345.c,71 :: 		
L_SPI1_Write8:
0x013F	0x1683      	BSF        STATUS, 5
0x0140	0x1814      	BTFSC      SSPSTAT, 0
0x0141	0x2944      	GOTO       L_SPI1_Write9
;__Lib_SPI_c345.c,72 :: 		
0x0142	0x0000      	NOP
0x0143	0x293F      	GOTO       L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_c345.c,73 :: 		
0x0144	0x1283      	BCF        STATUS, 5
0x0145	0x0813      	MOVF       SSPBUF, 0
0x0146	0x00F0      	MOVWF      R0
;__Lib_SPI_c345.c,75 :: 		
L_end_SPI1_Write:
0x0147	0x0008      	RETURN
; end of _SPI1_Write
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0148	0x20DC      	CALL       _____DoICP
0x0149	0x118A      	BCF        PCLATH, 3
0x014A	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x014B	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x014C	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x014D	0x0ABB      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x014E	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x014F	0x0ABC      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0150	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x0151	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0152	0x2948      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0153	0x0008      	RETURN
; end of ___CC2DW
_UART1_Write:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,40 :: 		
L_UART1_Write3:
0x0154	0x1683      	BSF        STATUS, 5
0x0155	0x1303      	BCF        STATUS, 6
0x0156	0x1898      	BTFSC      TXSTA, 1
0x0157	0x295A      	GOTO       L_UART1_Write4
;__Lib_UART_c67.c,41 :: 		
0x0158	0x0000      	NOP
0x0159	0x2954      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,42 :: 		
0x015A	0x1283      	BCF        STATUS, 5
0x015B	0x083F      	MOVF       FARG_UART1_Write_data_, 0
0x015C	0x0099      	MOVWF      TXREG
;__Lib_UART_c67.c,43 :: 		
L_end_UART1_Write:
0x015D	0x0008      	RETURN
; end of _UART1_Write
_main:
;Pic16.c,135 :: 		void main() {
;Pic16.c,137 :: 		CCP1CON = 0;   // Disable comparators
0x015E	0x1283      	BCF        STATUS, 5
0x015F	0x1303      	BCF        STATUS, 6
0x0160	0x0197      	CLRF       CCP1CON
;Pic16.c,139 :: 		ANSEL  = 0xFF;   // Configure AN0- AN7 pins as analog I/O
0x0161	0x30FF      	MOVLW      255
0x0162	0x1683      	BSF        STATUS, 5
0x0163	0x1703      	BSF        STATUS, 6
0x0164	0x0088      	MOVWF      ANSEL
;Pic16.c,140 :: 		ANSELH = 0;      //configure AN8-AN13 as digital
0x0165	0x0189      	CLRF       ANSELH
;Pic16.c,141 :: 		C1ON_bit = 0;    // Disable comparators
0x0166	0x1283      	BCF        STATUS, 5
0x0167	0x1387      	BCF        C1ON_bit, BitPos(C1ON_bit+0)
;Pic16.c,142 :: 		C2ON_bit = 0;
0x0168	0x1388      	BCF        C2ON_bit, BitPos(C2ON_bit+0)
;Pic16.c,143 :: 		option_reg.F7=1; //enable pull up resistors bit
0x0169	0x1683      	BSF        STATUS, 5
0x016A	0x1303      	BCF        STATUS, 6
0x016B	0x1781      	BSF        OPTION_REG, 7
;Pic16.c,144 :: 		WPUB=0xFF; //enable pull up resistors pins
0x016C	0x30FF      	MOVLW      255
0x016D	0x0095      	MOVWF      WPUB
;Pic16.c,145 :: 		TRISA  = 0x2F;  // analog pins as inputs
0x016E	0x302F      	MOVLW      47
0x016F	0x0085      	MOVWF      TRISA
;Pic16.c,146 :: 		mode_dir =1;    //plc mode pin is input
0x0170	0x1487      	BSF        TRISC1_bit, BitPos(TRISC1_bit+0)
;Pic16.c,147 :: 		PORTD =0;
0x0171	0x1283      	BCF        STATUS, 5
0x0172	0x0188      	CLRF       PORTD
;Pic16.c,148 :: 		TRISD  = 0xFF;   //Digital Inputs port as inputs
0x0173	0x30FF      	MOVLW      255
0x0174	0x1683      	BSF        STATUS, 5
0x0175	0x0088      	MOVWF      TRISD
;Pic16.c,149 :: 		portb = 0;
0x0176	0x1283      	BCF        STATUS, 5
0x0177	0x0186      	CLRF       PORTB
;Pic16.c,150 :: 		trisb =0x00;    //Digital outputs port as outputs
0x0178	0x1683      	BSF        STATUS, 5
0x0179	0x0186      	CLRF       TRISB
;Pic16.c,151 :: 		mcp_cs_dir=0;  //MCP Chip Select pin is output
0x017A	0x1107      	BCF        TRISC2_bit, BitPos(TRISC2_bit+0)
;Pic16.c,152 :: 		mcp_cs=1;      //Disable MCP DAC
0x017B	0x1283      	BCF        STATUS, 5
0x017C	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;Pic16.c,155 :: 		intcon.gie=1;   //globally enable all interrupts
0x017D	0x178B      	BSF        INTCON, 7
;Pic16.c,156 :: 		intcon.peie=1;  //Enables all unmasked peripheral interrupts
0x017E	0x170B      	BSF        INTCON, 6
;Pic16.c,157 :: 		pie1.rcie=1;     //Enables the EUSART receive interrupt
0x017F	0x1683      	BSF        STATUS, 5
0x0180	0x168C      	BSF        PIE1, 5
;Pic16.c,158 :: 		UART1_Init(9600); //init uart at 9600 bits per second
0x0181	0x3067      	MOVLW      103
0x0182	0x0099      	MOVWF      SPBRG
0x0183	0x1518      	BSF        TXSTA, 2
0x0184	0x212B      	CALL       _UART1_Init
;Pic16.c,159 :: 		delay_ms(100);    //wait for uart initialization
0x0185	0x3003      	MOVLW      3
0x0186	0x00FB      	MOVWF      R11
0x0187	0x3008      	MOVLW      8
0x0188	0x00FC      	MOVWF      R12
0x0189	0x3077      	MOVLW      119
0x018A	0x00FD      	MOVWF      R13
L_main40:
0x018B	0x0BFD      	DECFSZ     R13, 1
0x018C	0x298B      	GOTO       L_main40
0x018D	0x0BFC      	DECFSZ     R12, 1
0x018E	0x298B      	GOTO       L_main40
0x018F	0x0BFB      	DECFSZ     R11, 1
0x0190	0x298B      	GOTO       L_main40
;Pic16.c,161 :: 		adc_init();      //initialize ADC
0x0191	0x20EA      	CALL       _ADC_Init
;Pic16.c,162 :: 		delay_ms(10);
0x0192	0x3034      	MOVLW      52
0x0193	0x00FC      	MOVWF      R12
0x0194	0x30F1      	MOVLW      241
0x0195	0x00FD      	MOVWF      R13
L_main41:
0x0196	0x0BFD      	DECFSZ     R13, 1
0x0197	0x2996      	GOTO       L_main41
0x0198	0x0BFC      	DECFSZ     R12, 1
0x0199	0x2996      	GOTO       L_main41
0x019A	0x0000      	NOP
0x019B	0x0000      	NOP
;Pic16.c,164 :: 		SPI1_Init();
0x019C	0x211E      	CALL       _SPI1_Init
;Pic16.c,165 :: 		delay_ms(100);
0x019D	0x3003      	MOVLW      3
0x019E	0x00FB      	MOVWF      R11
0x019F	0x3008      	MOVLW      8
0x01A0	0x00FC      	MOVWF      R12
0x01A1	0x3077      	MOVLW      119
0x01A2	0x00FD      	MOVWF      R13
L_main42:
0x01A3	0x0BFD      	DECFSZ     R13, 1
0x01A4	0x29A3      	GOTO       L_main42
0x01A5	0x0BFC      	DECFSZ     R12, 1
0x01A6	0x29A3      	GOTO       L_main42
0x01A7	0x0BFB      	DECFSZ     R11, 1
0x01A8	0x29A3      	GOTO       L_main42
;Pic16.c,167 :: 		session=0;
0x01A9	0x01A7      	CLRF       _session
;Pic16.c,168 :: 		anOut=0;
0x01AA	0x01B2      	CLRF       _anOut
0x01AB	0x01B3      	CLRF       _anOut+1
;Pic16.c,170 :: 		do {
L_main43:
;Pic16.c,171 :: 		if(mode){ //Only if we are in run mode
0x01AC	0x1C87      	BTFSS      RC1_bit, BitPos(RC1_bit+0)
0x01AD	0x2A0C      	GOTO       L_main46
;Pic16.c,172 :: 		anIn0 = ADC_Read(0); // Get 10-bit result of AD conversion
0x01AE	0x01BE      	CLRF       FARG_ADC_Read_channel
0x01AF	0x20FC      	CALL       _ADC_Read
0x01B0	0x0870      	MOVF       R0, 0
0x01B1	0x1283      	BCF        STATUS, 5
0x01B2	0x00B4      	MOVWF      _anIn0
0x01B3	0x0871      	MOVF       R0+1, 0
0x01B4	0x00B5      	MOVWF      _anIn0+1
;Pic16.c,173 :: 		anIn1 = ADC_Read(1); // Get 10-bit result of AD conversion
0x01B5	0x3001      	MOVLW      1
0x01B6	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01B7	0x20FC      	CALL       _ADC_Read
0x01B8	0x0870      	MOVF       R0, 0
0x01B9	0x1283      	BCF        STATUS, 5
0x01BA	0x00B8      	MOVWF      _anIn1
0x01BB	0x0871      	MOVF       R0+1, 0
0x01BC	0x00B9      	MOVWF      _anIn1+1
;Pic16.c,174 :: 		anIn2 = ADC_Read(2); // Get 10-bit result of AD conversion
0x01BD	0x3002      	MOVLW      2
0x01BE	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01BF	0x20FC      	CALL       _ADC_Read
0x01C0	0x0870      	MOVF       R0, 0
0x01C1	0x1283      	BCF        STATUS, 5
0x01C2	0x00B6      	MOVWF      _anIn2
0x01C3	0x0871      	MOVF       R0+1, 0
0x01C4	0x00B7      	MOVWF      _anIn2+1
;Pic16.c,175 :: 		anIn3 = ADC_Read(3); // Get 10-bit result of AD conversion
0x01C5	0x3003      	MOVLW      3
0x01C6	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01C7	0x20FC      	CALL       _ADC_Read
0x01C8	0x0870      	MOVF       R0, 0
0x01C9	0x1283      	BCF        STATUS, 5
0x01CA	0x00AA      	MOVWF      _anIn3
0x01CB	0x0871      	MOVF       R0+1, 0
0x01CC	0x00AB      	MOVWF      _anIn3+1
;Pic16.c,176 :: 		anIn4 = ADC_Read(4); // Get 10-bit result of AD conversion
0x01CD	0x3004      	MOVLW      4
0x01CE	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01CF	0x20FC      	CALL       _ADC_Read
0x01D0	0x0870      	MOVF       R0, 0
0x01D1	0x1283      	BCF        STATUS, 5
0x01D2	0x00A8      	MOVWF      _anIn4
0x01D3	0x0871      	MOVF       R0+1, 0
0x01D4	0x00A9      	MOVWF      _anIn4+1
;Pic16.c,177 :: 		anIn5 = ADC_Read(5); // Get 10-bit result of AD conversion
0x01D5	0x3005      	MOVLW      5
0x01D6	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01D7	0x20FC      	CALL       _ADC_Read
0x01D8	0x0870      	MOVF       R0, 0
0x01D9	0x1283      	BCF        STATUS, 5
0x01DA	0x00AC      	MOVWF      _anIn5
0x01DB	0x0871      	MOVF       R0+1, 0
0x01DC	0x00AD      	MOVWF      _anIn5+1
;Pic16.c,178 :: 		anIn6 = ADC_Read(6); // Get 10-bit result of AD conversion
0x01DD	0x3006      	MOVLW      6
0x01DE	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01DF	0x20FC      	CALL       _ADC_Read
0x01E0	0x0870      	MOVF       R0, 0
0x01E1	0x1283      	BCF        STATUS, 5
0x01E2	0x00B0      	MOVWF      _anIn6
0x01E3	0x0871      	MOVF       R0+1, 0
0x01E4	0x00B1      	MOVWF      _anIn6+1
;Pic16.c,179 :: 		anIn7 = ADC_Read(7); // Get 10-bit result of AD conversion
0x01E5	0x3007      	MOVLW      7
0x01E6	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01E7	0x20FC      	CALL       _ADC_Read
0x01E8	0x0870      	MOVF       R0, 0
0x01E9	0x1283      	BCF        STATUS, 5
0x01EA	0x00AE      	MOVWF      _anIn7
0x01EB	0x0871      	MOVF       R0+1, 0
0x01EC	0x00AF      	MOVWF      _anIn7+1
;Pic16.c,181 :: 		mcp_cs = 0; //Select MCP4921 DAC
0x01ED	0x1107      	BCF        RC2_bit, BitPos(RC2_bit+0)
;Pic16.c,182 :: 		temp = Hi(anOut)&0xF; // Store valueDAC[11..8] to temp[3..0]
0x01EE	0x300F      	MOVLW      15
0x01EF	0x0533      	ANDWF      _anOut+1, 0
0x01F0	0x00F0      	MOVWF      R0
0x01F1	0x0870      	MOVF       R0, 0
0x01F2	0x00A1      	MOVWF      _temp
;Pic16.c,183 :: 		temp |= 0x30; // Define DAC setting, see MCP4921 datasheet
0x01F3	0x3030      	MOVLW      48
0x01F4	0x04F0      	IORWF      R0, 1
0x01F5	0x0870      	MOVF       R0, 0
0x01F6	0x00A1      	MOVWF      _temp
;Pic16.c,184 :: 		SPI1_Write(temp); // Send high byte via SPI_Soft
0x01F7	0x0870      	MOVF       R0, 0
0x01F8	0x00BE      	MOVWF      FARG_SPI1_Write_data_
0x01F9	0x213B      	CALL       _SPI1_Write
;Pic16.c,186 :: 		temp = Lo(anOut);
0x01FA	0x0832      	MOVF       _anOut, 0
0x01FB	0x00A1      	MOVWF      _temp
;Pic16.c,187 :: 		SPI1_Write(temp); // Send low byte via SPI
0x01FC	0x0832      	MOVF       _anOut, 0
0x01FD	0x00BE      	MOVWF      FARG_SPI1_Write_data_
0x01FE	0x213B      	CALL       _SPI1_Write
;Pic16.c,188 :: 		mcp_cs = 1; //Disable DAC
0x01FF	0x1507      	BSF        RC2_bit, BitPos(RC2_bit+0)
;Pic16.c,189 :: 		delay_ms(100);
0x0200	0x3003      	MOVLW      3
0x0201	0x00FB      	MOVWF      R11
0x0202	0x3008      	MOVLW      8
0x0203	0x00FC      	MOVWF      R12
0x0204	0x3077      	MOVLW      119
0x0205	0x00FD      	MOVWF      R13
L_main47:
0x0206	0x0BFD      	DECFSZ     R13, 1
0x0207	0x2A06      	GOTO       L_main47
0x0208	0x0BFC      	DECFSZ     R12, 1
0x0209	0x2A06      	GOTO       L_main47
0x020A	0x0BFB      	DECFSZ     R11, 1
0x020B	0x2A06      	GOTO       L_main47
;Pic16.c,190 :: 		}
L_main46:
;Pic16.c,191 :: 		} while(1);
0x020C	0x29AC      	GOTO       L_main43
;Pic16.c,192 :: 		}
L_end_main:
0x020D	0x2A0D      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [216]    _interrupt
0x00DC       [7]    _____DoICP
0x00E3       [7]    _Delay_22us
0x00EA      [18]    _ADC_Init
0x00FC      [34]    _ADC_Read
0x011E      [13]    _SPI1_Init
0x012B      [16]    _UART1_Init
0x013B      [13]    _SPI1_Write
0x0148      [12]    ___CC2DW
0x0154      [10]    _UART1_Write
0x015E     [176]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [0]    RC2_bit
0x0007       [0]    mode
0x0007       [0]    RC1_bit
0x0007       [0]    mcp_cs
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0017       [1]    CCP1CON
0x0018       [1]    RCSTA
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0021       [1]    _temp
0x0022       [1]    _rxByte
0x0023       [1]    _txByte
0x0024       [3]    _ADC_Get_Sample_Ptr
0x0027       [1]    _session
0x0028       [2]    _anIn4
0x002A       [2]    _anIn3
0x002C       [2]    _anIn5
0x002E       [2]    _anIn7
0x0030       [2]    _anIn6
0x0032       [2]    _anOut
0x0034       [2]    _anIn0
0x0036       [2]    _anIn2
0x0038       [2]    _anIn1
0x003A       [1]    ___savePCLATH
0x003B       [2]    ___DoICPAddr
0x003D       [1]    ___saveSTATUS
0x003E       [1]    FARG_ADC_Read_channel
0x003E       [1]    FARG_SPI1_Write_data_
0x003F       [1]    FARG_UART1_Write_data_
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [0]    mcp_cs_dir
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC7_bit
0x0087       [0]    TRISC1_bit
0x0087       [0]    mode_dir
0x0087       [0]    TRISC2_bit
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC4_bit
0x0088       [1]    TRISD
0x008C       [1]    PIE1
0x0094       [1]    SSPSTAT
0x0095       [1]    WPUB
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
0x009A       [1]    SPBRGH
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
0x0107       [0]    C1ON_bit
0x0108       [0]    C2ON_bit
0x0188       [1]    ANSEL
0x0189       [1]    ANSELH
